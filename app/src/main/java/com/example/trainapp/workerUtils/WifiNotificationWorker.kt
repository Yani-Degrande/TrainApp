package com.example.trainapp.workerUtils

import android.Manifest
import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.content.pm.PackageManager
import android.os.Build
import androidx.core.app.ActivityCompat
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import androidx.work.CoroutineWorker
import androidx.work.WorkerParameters
import com.example.trainapp.R
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.withContext

/**
 * A worker class that performs work related to Wi-Fi connectivity in the background.
 * Extends CoroutineWorker to leverage coroutines for asynchronous work.
 *
 * @property context The context used for creating notifications.
 * @property params Parameters for configuring the worker.
 */
private const val TAG = "WithWifiWorker"

class WifiNotificationWorker(context: Context, params: WorkerParameters) : CoroutineWorker(context, params) {
    /**
     * The main work method of the Worker. This method is called on a background thread.
     *
     * @return [Result] indicating the outcome of the work (success or failure).
     */
    override suspend fun doWork(): Result {
        makeStatusNotification("starting the worker", applicationContext)
        return withContext(Dispatchers.IO) {
            return@withContext try {
                delay(10000L)
                makeStatusNotification("work finished successfully", applicationContext)
                Result.success()
            } catch (throwable: Throwable) {
                Result.failure()
            }
        }
    }
}

/**
 * Creates and displays a status notification.
 * For devices on Android O and above, it creates a notification channel if it does not already exist.
 *
 * @param message The message to display in the notification.
 * @param context The context used to access system services and resources.
 */
fun makeStatusNotification(
    message: String,
    context: Context,
) {
    // Make a channel if necessary
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
        // Create the NotificationChannel, but only on API 26+ because
        // the NotificationChannel class is new and not in the support library
        val name = "TrainApp"
        val description = "TrainApp notifications"
        val importance = NotificationManager.IMPORTANCE_HIGH
        val channel = NotificationChannel("trainApp", name, importance)
        channel.description = description

        // Add the channel
        val notificationManager =
            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager?

        notificationManager?.createNotificationChannel(channel)
    }

    // Create the notification
    val builder =
        NotificationCompat.Builder(context, "trainApp")
            .setSmallIcon(R.mipmap.ic_launcher)
            .setContentTitle("TrainApp")
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setVibrate(LongArray(0))

    /*Note: this code was generated by Android studio
     * It follows the same principles used in the camera screen composable
     * */
    // Show the notification
    if (ActivityCompat.checkSelfPermission(
            context,
            Manifest.permission.POST_NOTIFICATIONS,
        ) != PackageManager.PERMISSION_GRANTED
    ) {
        // TODO: Consider calling
        //    ActivityCompat#requestPermissions
        // here to request the missing permissions, and then overriding
        //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
        //                                          int[] grantResults)
        // to handle the case where the user grants the permission. See the documentation
        // for ActivityCompat#requestPermissions for more details.
        return
    }
    NotificationManagerCompat.from(context).notify(1, builder.build())
}
